const aws = require('aws-sdk');
const sharp = require('sharp');
const express = require('express');
const pool = require('../modules/pool');
const router = express.Router();
require('dotenv').config();
const {
    rejectUnauthenticated,
} = require('../modules/authentication-middleware');

const { AWS_S3_REGION, AWS_S3_BUCKET, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY } = process.env;
aws.config.region = AWS_S3_REGION;

router.get('/', rejectUnauthenticated, (req,res) => {
    userId = req.user.id;
    queryText = `SELECT "mushroom_picture_thumb", "mushroom_picture_medium", "user_id", "log_id" FROM "mushroom_pictures" LEFT JOIN
    "mushroom_junction" ON "mushroom_junction"."mushroom_picture_id" = "mushroom_pictures"."id"
    WHERE "user_id"=$1;`
    pool.query(queryText, [userId])
    .then(results => {
        console.log('results of get photos in router', results.rows);
        res.send(results.rows);
    })
    .catch(error => {
        res.send('there was an error fetching mushroom photos', error)
    })
})

router.get('/:id', rejectUnauthenticated, (req, res) => {
    const selectedId = Number(req.params.id);
    const newId = Number(selectedId.id);
    console.log('selected log id in picture router', selectedId);
    const userId = req.user.id;
    console.log('user id in picture router', userId)
    queryText = `SELECT "user_id", "mushroom_picture_thumb", "mushroom_picture_medium", "log_id" FROM "mushroom_pictures"
    JOIN "mushroom_junction" ON "mushroom_junction"."mushroom_picture_id" = "mushroom_pictures"."id"
    JOIN "user" ON "mushroom_junction"."user_id"="user"."id" WHERE "log_id"=$1 and "user_id"=$2;`
    pool.query(queryText, [selectedId, userId])
        .then(results => {
            res.sendStatus(200)
        })
        .catch(error => {
            console.log('there was an error getting details', error);
            res.sendStatus(500);
        })
})

/**
 * @api {post} /s3 Upload Photo
 * @apiPermission user
 * @apiName PostPhoto
 * @apiGroup Photo
 * @apiDescription This route uploads a photo.
 *
 * @apiParam {String} name              Mandatory image file name.
 * @apiParam {String} type              Mandatory image file type.
 * @apiParam {String} size              Mandatory image file size.
 * @apiParam {File}   image             Mandatory image
 *
 * @apiSuccessExample {json} Success-Response:
 *      HTTP/1.1 201 OK
 */

 router.put('/', rejectUnauthenticated, (req, res) => {
    // updates profile picture in user table in database
    // url is aws bucket location and filename 
    // which is generated by AWS S3
    console.log('req.body is', req.body.selectedFile);
    const fileName = req.body.selectedFile;
    const mediumUrl = `https://${AWS_S3_BUCKET}.s3.${AWS_S3_REGION}.amazonaws.com/photos/medium/${fileName}`;
    const thumbUrl = `https://${AWS_S3_BUCKET}.s3.${AWS_S3_REGION}.amazonaws.com/photos/thumb/${fileName}`;
    const userId = req.user.id;
    const queryText = `SELECT "id" FROM "log_entry" ORDER BY "id" DESC LIMIT 1;`;
    pool.query(queryText)
        .then(result => {
            console.log('New Log ID:', result.rows[0].id);
            let logId = result.rows[0].id;
    queryText = `INSERT INTO "mushroom_pictures" ("mushroom_picture_url", "user_id", "log_entry_id") VALUES ($1, $2, $3)`;
    pool.query(queryText, [mediumUrl, userId, logId])
        .then(result => {
            // sends success status on completion
            res.sendStatus(200)
        })
        .then(result => {
            res.sendStatus(200)})
            .catch(error => {
            // sends error status on error
            console.log('there was an error posting mushroom picture', error);
            res.sendStatus(500);
        })
        .catch(error => {
            console.log('there was an error posting to db', error);
            
            res.sendStatus(500);
        })
})
 })
 
router.post('/s3', rejectUnauthenticated, async (req, res) => {
    if (!AWS_S3_BUCKET || !AWS_S3_REGION || !AWS_ACCESS_KEY_ID || !AWS_SECRET_ACCESS_KEY) {
        res.status(500).send('Missing environment variables for AWS bucket.');
        return;
    }
    try {
        const imageUserId = req.user.id
        const imageProps = req.query;
        const imageData = req.files.image.data;
        const mediumKey = `photos/medium/${imageProps.name}`;
        // Optionally, resize the image
        const mediumFileConent = await sharp(imageData).resize(300, 300).toBuffer();

        // Setting up S3 upload parameters
        const params = {
            Bucket: AWS_S3_BUCKET,
            Key: mediumKey,
            Body: mediumFileConent,
            ACL: 'public-read',
        };
        const s3 = new aws.S3();
        // Uploading files to the bucket
        const data = await s3.upload(params).promise();

        // Optionally, create a thumbnail
        const thumbFileConent = await sharp(imageData).resize(100, 100).toBuffer();
        const thumbKey = `photos/thumb/${imageProps.name}`;
        params.Key = thumbKey;
        params.Body = thumbFileConent;
        await s3.upload(params).promise();
        // Send back medium image data.
        res.send(data);
        console.log('data after post to s3', data);
    } catch (error) {
        console.log('in s3 catch', error);

        res.sendStatus(500);
    }
});


module.exports = router;